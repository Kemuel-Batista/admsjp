generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id String @id @default(uuid())

  name        String @unique
  description String
  status      Int
  visible     Int

  createdAt DateTime  @default(now()) @map("created_at")
  createdBy String    @map("created_by")
  updatedAt DateTime? @map("updated_at")
  updatedBy String?   @map("updated_by")
  deletedAt DateTime? @map("deleted_at")
  deletedBy String?   @map("deleted_by")

  users  User[]
  events Event[]

  @@map("departments")
}

model User {
  id       String @id @default(uuid())
  name     String
  status   Int
  photo    String @default("")
  email    String @unique
  provider String @default("system")
  password String

  departmentId String     @map("department_id")
  department   Department @relation(fields: [departmentId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  createdBy String    @map("created_by")
  updatedAt DateTime? @map("updated_at")
  updatedBy String?   @map("updated_by")
  deletedAt DateTime? @map("deleted_at")
  deletedBy String?   @map("deleted_by")

  eventPurchases  EventPurchase[]
  UsersOnProfiles UsersOnProfiles[]

  @@map("users")
}

model Profile {
  id      String @id @default(uuid())
  name    String @unique
  status  Int
  visible Int

  createdAt DateTime  @default(now()) @map("created_at")
  createdBy String    @map("created_by")
  updatedAt DateTime? @map("updated_at")
  updatedBy String?   @map("updated_by")
  deletedAt DateTime? @map("deleted_at")
  deletedBy String?   @map("deleted_by")

  usersOnProfiles UsersOnProfiles[]

  @@map("profiles")
}

model UsersOnProfiles {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  @@id([userId, profileId])
}

model Parameter {
  id        String    @id @default(uuid())
  key       String    @unique
  keyInfo   String    @map("key_info")
  value     String
  status    Int       @default(1)
  visible   Int       @default(1)
  createdAt DateTime  @default(now()) @map("created_at")
  createdBy String    @map("created_by")
  updatedAt DateTime? @map("updated_at")
  updatedBy String?   @map("updated_by")

  @@map("parameters")
}

model Event {
  id           String     @id @default(uuid())
  title        String     @unique
  slug         String     @unique
  description  String     @db.Text
  initialDate  DateTime   @map("initial_date")
  finalDate    DateTime   @map("final_date")
  status       Int
  visible      Int
  departmentId String     @map("department_id")
  department   Department @relation(fields: [departmentId], references: [id])
  eventType    Int        @map("event_type")
  imagePath    String     @map("image_path")
  pixKey       String     @map("pix_key")
  pixType      Int        @map("pix_type")
  message      String?

  createdAt DateTime  @default(now()) @map("created_at")
  createdBy String    @map("created_by")
  updatedAt DateTime? @map("updated_at")
  updatedBy String?   @map("updated_by")
  deletedAt DateTime? @map("deleted_at")
  deletedBy String?   @map("deleted_by")

  eventAddress   EventAddress?
  eventLots      EventLot[]
  eventPurchases EventPurchase[]

  @@map("events")
}

model EventAddress {
  id           String  @id @default(uuid())
  eventId      String  @unique @map("event_id")
  event        Event   @relation(fields: [eventId], references: [id])
  street       String
  number       String
  complement   String
  neighborhood String
  state        Int
  city         Int
  latitude     Decimal
  longitude    Decimal

  createdAt DateTime  @default(now()) @map("created_at")
  createdBy String    @map("created_by")
  updatedAt DateTime? @map("updated_at")
  updatedBy String?   @map("updated_by")
  deletedAt DateTime? @map("deleted_at")
  deletedBy String?   @map("deleted_by")

  @@map("events_addresses")
}

model EventLot {
  id                String @id @unique @default(uuid())
  eventId           String @map("event_id")
  name              String
  description       String
  event             Event  @relation(fields: [eventId], references: [id])
  lot               Int
  type              String @default("Ingresso")
  quantity          Int
  fulfilledQuantity Int    @default(0) @map("fulfilled_quantity")
  value             Int
  status            Int

  createdAt DateTime  @default(now()) @map("created_at")
  createdBy String    @map("created_by")
  updatedAt DateTime? @map("updated_at")
  updatedBy String?   @map("updated_by")
  deletedAt DateTime? @map("deleted_at")
  deletedBy String?   @map("deleted_by")

  eventTickets EventTicket[]

  @@map("events_lots")
}

model EventPurchase {
  id            String        @id @unique @default(uuid())
  invoiceNumber String        @map("invoice_number")
  eventId       String        @map("event_id")
  event         Event         @relation(fields: [eventId], references: [id])
  buyerId       String        @map("buyer_id")
  user          User          @relation(fields: [buyerId], references: [id])
  status        Int
  expiresAt     DateTime?     @map("expires_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime?     @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")
  deletedBy     String?       @map("deleted_by")
  eventTickets  EventTicket[]

  @@map("event_purchases")
}

model EventTicket {
  id              String        @id @unique @default(uuid())
  eventPurchaseId String        @map("event_purchase_id")
  eventPurchase   EventPurchase @relation(fields: [eventPurchaseId], references: [id])
  eventLotId      String        @map("event_lot_id")
  eventLot        EventLot      @relation(fields: [eventLotId], references: [id])
  ticket          String
  qrCodeImage     String        @map("qr_code_image")
  qrCodeText      String        @map("qr_code_text")
  cpf             String        @default("")
  name            String        @default("")
  email           String        @default("")
  phone           String        @default("")
  birthday        DateTime      @default(now())
  shirtSize       String        @default("") @map("shirt_size")
  createdAt       DateTime      @default(now()) @map("created_at")

  @@map("events_tickets")
}

enum TransactionType {
  EVENTS
}

model Order {
  id              String          @id @default(uuid())
  transactionId   String          @map("transaction_id")
  transactionType TransactionType @default(EVENTS) @map("transaction_type")
  paymentMethod   Int             @map("payment_method")
  status          Int
  pixQrCode       String?         @map("pix_qr_code")
  paidAt          DateTime?       @map("paid_at")
  attachment      String?         @map("attachment")

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  deletedBy   String?   @map("deleted_by")
  confirmedBy String?   @map("confirmed_by")

  @@map("orders")
}
