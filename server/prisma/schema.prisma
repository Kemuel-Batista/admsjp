// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("users")
}

model Department {
  id          String @id @default(uuid())
  name        String @unique
  description String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  churchDepartments ChurchDepartment[]

  @@map("departments")
}

model Church {
  id           String  @id @default(uuid())
  name         String  @unique
  description  String
  street       String
  neighborhood String
  city         String
  state        String
  postalCode   String  @map("postal_code")
  number       String
  latitude     Decimal
  longitude    Decimal
  username     String  @unique
  password     String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  leaders      ChurchLeader[]
  departments  ChurchDepartment[]
  newBelievers NewBeliever[]

  @@map("churchs")
}

model ChurchLeader {
  id           String   @id @default(uuid())
  churchId     String   @map("church_id")
  name         String
  functionName String
  phone        String
  email        String   @unique
  birthday     DateTime

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  church Church @relation(fields: [churchId], references: [id])

  @@map("church_leaders")
}

model ChurchDepartment {
  id           String @id @default(uuid())
  churchId     String @map("church_id")
  departmentId String @map("department_id")
  username     String @unique
  password     String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  church     Church     @relation(fields: [churchId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  members ChurchDepartmentMember[]

  @@map("church_departments")
}

model ChurchDepartmentMember {
  id                 String   @id @default(uuid())
  churchDepartmentId String   @map("church_department_id")
  name               String
  functionName       String   @map("function_name")
  subFunction        String   @map("sub_function")
  phone              String
  email              String   @unique
  birthday           DateTime

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  churchDepartment ChurchDepartment @relation(fields: [churchDepartmentId], references: [id])

  @@map("church_department_members")
}

model NewBeliever {
  id       String   @id @default(uuid())
  churchId String   @map("church_id")
  name     String
  lastName String
  phone    String   @unique
  email    String?  @unique
  birthday DateTime

  street       String
  neighborhood String
  city         String
  state        String
  postalCode   String @map("postal_code")
  number       String

  status Int
  lgpd   Boolean

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  church Church @relation(fields: [churchId], references: [id])

  @@map("new_believers")
}
