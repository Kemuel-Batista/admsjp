// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  uuid      String  @unique @default(uuid())
  name      String
  username  String  @unique
  status    Int
  profileId Int     @default(1)
  profile   Profile @relation("UserProfile", fields: [profileId], references: [id])
  email     String  @unique
  password  String

  departmentId Int
  department   Department @relation("UserDepartment", fields: [departmentId], references: [id])

  createdAt  DateTime    @default(now()) @map("created_at")
  createdBy  Int
  updatedAt  DateTime?   @updatedAt @map("updated_at")
  updatedBy  Int
  deletedAt  DateTime?   @map("deleted_at")
  userTokens UserToken[]
}

model UserToken {
  id           Int      @id @default(autoincrement())
  uuid         String   @unique @default(uuid())
  token        String
  refreshToken String
  expiresAt    DateTime
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
}

model Profile {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      String   @unique
  status    Int
  visible   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy Int
  updatedBy Int

  users              User[]              @relation("UserProfile")
  profilePermissions ProfilePermission[] @relation("ProfilePermission")
}

model ProfilePermission {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  profileId Int
  key       String
  profile   Profile  @relation("ProfilePermission", fields: [profileId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy Int
  updatedBy Int

  @@unique(name: "KeyProfileId", [key, profileId])
}

model Department {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  name        String @unique
  description String
  status      Int
  visible     Int

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  createdBy Int
  updatedBy Int

  User  User[]  @relation("UserDepartment")
  Event Event[] @relation("DepartmentEvent")
}

model Event {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  title       String   @unique
  slug        String   @unique
  description String
  value       Int
  initialDate DateTime
  finalDate   DateTime

  status  Int
  visible Int

  departmentId Int
  department   Department @relation("DepartmentEvent", fields: [departmentId], references: [id])
  eventType    String

  imagePath String

  street       String?
  number       String?
  complement   String?
  neighborhood String?
  state        Int?
  city         Int?
  latitude     Decimal?
  longitude    Decimal?

  message String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  createdBy Int
  updatedBy Int

  EventSubscription EventSubscription[]
}

model EventSubscription {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  eventId  Int
  ticket   String @unique
  fullName String
  email    String
  phone    String

  status        Int
  paymentMethod Int

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  event Event @relation(fields: [eventId], references: [id])
}
